AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "Path-aware CI for multi-stack Lambda/Layers (AWS-only): CodeCommit PR -> CodeBuild Dispatcher -> stack-specific workers"

Parameters:
  ExistingRepoName:
    Type: String
    Default: cogira-backend
  BranchName:
    Type: String
    Default: main
  ProjectPrefix:
    Type: String
    Default: cogira
  CiEnv:
    Type: String
    Default: dev
    Description: "ENV passed to root Makefile (loads env/<ENV>.env)"
  NodeMajor:
    Type: Number
    Default: 20

Mappings:
  Images:
    Standard:
      Image: "aws/codebuild/standard:7.0"

Resources:
  #############################################
  # ARNs / constants for existing CodeCommit
  #############################################
  RepoArn:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${ProjectPrefix}/ci/repo-arn/${ExistingRepoName}"
      Type: String
      Value: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${ExistingRepoName}"
      Description: "Stored here only to reuse Sub; not read at runtime."

  #############################################
  # Roles
  #############################################
  EventsToCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-events-startbuild"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartDispatcher
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt CiDispatchProject.Arn

  CiDispatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-dispatch-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DiffAndTrigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GetDifferences
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetPullRequest
                Resource: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${ExistingRepoName}"
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource:
                  - !GetAtt CiDdbLayerProject.Arn
                  - !GetAtt CiHelloLambdaProject.Arn

  CiWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-worker-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CodeCommitRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                  - codecommit:GetRepository
                  - codecommit:GetBranch
                Resource: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${ExistingRepoName}"

  #############################################
  # CodeBuild projects
  #############################################
  CiDispatchProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-dispatch"
      ServiceRole: !GetAtt CiDispatchRole.Arn
      Artifacts: { Type: NO_ARTIFACTS }
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - yum -y -q install jq >/dev/null
            build:
              commands:
                - echo "Dispatching for PR $PR_ID on $REPO_NAME"
                - >
                  aws codecommit get-differences
                  --repository-name "$REPO_NAME"
                  --before-commit-specifier "$DESTINATION_COMMIT"
                  --after-commit-specifier  "$SOURCE_COMMIT"
                  --output json
                  | jq -r '.differences[]? | (.afterBlob.path // .beforeBlob.path)'
                  | sort -u > /tmp/changed.txt
                - echo "Changed paths:" && cat /tmp/changed.txt || true
                - export MAKE_DDB="ci-ddb-layer"
                - export MAKE_HELLO="ci-hello-lambda"
                - if grep -qE '^layers/ddb/' /tmp/changed.txt; then
                    echo "Starting $CI_DDB for $MAKE_DDB";
                    aws codebuild start-build --project-name "$CI_DDB" \
                      --source-version "$SOURCE_COMMIT" \
                      --environment-variables-override \
                        name=ENV,value="$CI_ENV",type=PLAINTEXT \
                        name=MAKE_TARGET,value="$MAKE_DDB",type=PLAINTEXT;
                  else echo "No ddb changes"; fi
                - if grep -qE '^functions/hello-lambda/' /tmp/changed.txt; then
                    echo "Starting $CI_HELLO for $MAKE_HELLO";
                    aws codebuild start-build --project-name "$CI_HELLO" \
                      --source-version "$SOURCE_COMMIT" \
                      --environment-variables-override \
                        name=ENV,value="$CI_ENV",type=PLAINTEXT \
                        name=MAKE_TARGET,value="$MAKE_HELLO",type=PLAINTEXT;
                  else echo "No hello-lambda changes"; fi
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: REPO_NAME, Value: !Ref ExistingRepoName }
          - { Name: BRANCH, Value: !Ref BranchName }
          - { Name: CI_ENV, Value: !Ref CiEnv }
          - { Name: CI_DDB, Value: !Ref CiDdbLayerProject }
          - { Name: CI_HELLO, Value: !Ref CiHelloLambdaProject }
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs: { Status: ENABLED }

  # Worker: runs root-level make <target>
  CiDdbLayerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-layers-ddb"
      ServiceRole: !GetAtt CiWorkerRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${ExistingRepoName}"
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - python3 -m pip install --upgrade pip >/dev/null
                - python3 -m pip install aws-sam-cli >/dev/null
                - npm -v || true
            build:
              commands:
                - echo "Root make target: $MAKE_TARGET (ENV=$ENV)"
                - make -e $MAKE_TARGET
      Artifacts: { Type: NO_ARTIFACTS }
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: ENV, Value: !Ref CiEnv }
          - { Name: MAKE_TARGET, Value: "ci-ddb-layer" }
      LogsConfig:
        CloudWatchLogs: { Status: ENABLED }

  CiHelloLambdaProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-functions-hello"
      ServiceRole: !GetAtt CiWorkerRole.Arn
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${ExistingRepoName}"
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - python3 -m pip install --upgrade pip >/dev/null
                - python3 -m pip install aws-sam-cli >/dev/null
            build:
              commands:
                - echo "Root make target: $MAKE_TARGET (ENV=$ENV)"
                - make -e $MAKE_TARGET
      Artifacts: { Type: NO_ARTIFACTS }
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: ENV, Value: !Ref CiEnv }
          - { Name: MAKE_TARGET, Value: "ci-hello-lambda" }
      LogsConfig:
        CloudWatchLogs: { Status: ENABLED }

  #############################################
  # PR events -> dispatcher
  #############################################
  PullRequestCI:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-pr"
      Description: "Trigger CI on CodeCommit PR create/update to ${BranchName}"
      EventPattern:
        source: ["aws.codecommit"]
        detail-type: ["CodeCommit Pull Request State Change"]
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${ExistingRepoName}"
        detail:
          event:
            [
              "pullRequestCreated",
              "pullRequestSourceBranchUpdated",
              "pullRequestReopened",
            ]
          destinationReference: [!Sub "refs/heads/${BranchName}"]
      Targets:
        - Id: Dispatch
          Arn: !GetAtt CiDispatchProject.Arn
          RoleArn: !GetAtt EventsToCodeBuildRole.Arn
          InputTransformer:
            InputPathsMap:
              pr: $.detail.pullRequestId
              srcCommit: $.detail.sourceCommit
              dstCommit: $.detail.destinationCommit
            InputTemplate: |
              {
                "sourceVersion": "refs/heads/main",
                "environmentVariablesOverride": [
                  {"name":"PR_ID","value":"<pr>","type":"PLAINTEXT"},
                  {"name":"SOURCE_COMMIT","value":"<srcCommit>","type":"PLAINTEXT"},
                  {"name":"DESTINATION_COMMIT","value":"<dstCommit>","type":"PLAINTEXT"}
                ]
              }

Outputs:
  DispatchProject: { Value: !Ref CiDispatchProject }
  WorkerDdb: { Value: !Ref CiDdbLayerProject }
  WorkerHello: { Value: !Ref CiHelloLambdaProject }
