AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "Path-aware CI for multi-stack (generic function worker + ddb layer worker)"

Parameters:
  RepoName:
    Type: String
    Default: cogira-backend
  BranchName:
    Type: String
    Default: main
  ProjectPrefix:
    Type: String
    Default: cogira
  CiEnv:
    Type: String
    Default: dev
    Description: "ENV passed to root Makefile (loads env/<ENV>.env)"

Mappings:
  Images:
    Standard:
      Image: "aws/codebuild/standard:7.0"

Resources:
  # Optional helper param (reference only)
  RepoArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectPrefix}/ci/repo-arn/${RepoName}"
      Type: String
      Value: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${RepoName}"
      Description: "Stored for reference only."

  ############################################################
  # Roles
  ############################################################
  EventsToCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-events-startbuild"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StartDispatcher
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt CiDispatchProject.Arn

  CiDispatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-dispatch-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: DiffAndTrigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # read PR + diffs + clone buildspec from repo
              - Effect: Allow
                Action:
                  - codecommit:GetDifferences
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetPullRequest
                  - codecommit:GitPull
                Resource: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${RepoName}"
              # start worker builds
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource:
                  - !GetAtt CiDdbLayerProject.Arn
                  - !GetAtt CiFunctionWorkerProject.Arn

  CiWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectPrefix}-ci-worker-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CodeCommitRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                  - codecommit:GetRepository
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                Resource: !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${RepoName}"

  ############################################################
  # CloudWatch Log Groups (24-hour retention)
  ############################################################
  DispatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${ProjectPrefix}-ci-dispatch"
      RetentionInDays: 1

  DdbWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${ProjectPrefix}-ci-layers-ddb"
      RetentionInDays: 1

  FuncWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${ProjectPrefix}-ci-functions-generic"
      RetentionInDays: 1

  ############################################################
  # CodeBuild projects
  ############################################################
  CiDispatchProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-dispatch"
      ServiceRole: !GetAtt CiDispatchRole.Arn
      Artifacts: { Type: NO_ARTIFACTS }
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepoName}"
        GitCloneDepth: 1
        BuildSpec: "pipeline/ci-dispatcher.yml" # lives in repo
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: REPO_NAME, Value: !Ref RepoName }
          - { Name: BRANCH, Value: !Ref BranchName }
          - { Name: CI_ENV, Value: !Ref CiEnv }
          - { Name: CI_DDB, Value: !Ref CiDdbLayerProject }
          - { Name: CI_FUNC, Value: !Ref CiFunctionWorkerProject }
      TimeoutInMinutes: 10
      QueuedTimeoutInMinutes: 10
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref DispatchLogGroup

  # Fixed worker for the shared DDB layer
  CiDdbLayerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-layers-ddb"
      ServiceRole: !GetAtt CiWorkerRole.Arn
      Artifacts: { Type: NO_ARTIFACTS }
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepoName}"
        GitCloneDepth: 1
        BuildSpec: "pipeline/ci-worker.yml" # shared worker buildspec
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: ENV, Value: !Ref CiEnv }
          - { Name: MAKE_TARGET, Value: "ci-ddb-layer" }
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref DdbWorkerLogGroup

  # Generic worker for ANY function under functions/<name>/
  CiFunctionWorkerProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-functions-generic"
      ServiceRole: !GetAtt CiWorkerRole.Arn
      Artifacts: { Type: NO_ARTIFACTS }
      Source:
        Type: CODECOMMIT
        Location: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepoName}"
        GitCloneDepth: 1
        BuildSpec: "pipeline/ci-worker.yml" # shared worker buildspec
      Environment:
        Type: LINUX_CONTAINER
        Image: !FindInMap [Images, Standard, Image]
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - { Name: ENV, Value: !Ref CiEnv }
          - { Name: MAKE_TARGET, Value: "ci-function" } # function name injected per-build
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref FuncWorkerLogGroup

  ############################################################
  # PR events -> dispatcher (pins buildspec to destination commit)
  ############################################################
  PullRequestCI:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${ProjectPrefix}-ci-pr"
      Description: !Sub "Trigger CI on CodeCommit PR create/update to ${BranchName}"
      EventPattern:
        source: ["aws.codecommit"]
        detail-type: ["CodeCommit Pull Request State Change"]
        resources:
          - !Sub "arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${RepoName}"
        detail:
          event:
            - pullRequestCreated
            - pullRequestSourceBranchUpdated
            - pullRequestReopened
          destinationReference:
            - !Sub "refs/heads/${BranchName}"
      Targets:
        - Id: Dispatch
          Arn: !GetAtt CiDispatchProject.Arn
          RoleArn: !GetAtt EventsToCodeBuildRole.Arn
          InputTransformer:
            InputPathsMap:
              pr: $.detail.pullRequestId
              srcCommit: $.detail.sourceCommit
              dstCommit: $.detail.destinationCommit
            InputTemplate: |
              {
                "sourceVersion": "<dstCommit>",
                "environmentVariablesOverride": [
                  {"name":"PR_ID","value":"<pr>","type":"PLAINTEXT"},
                  {"name":"SOURCE_COMMIT","value":"<srcCommit>","type":"PLAINTEXT"},
                  {"name":"DESTINATION_COMMIT","value":"<dstCommit>","type":"PLAINTEXT"}
                ]
              }

Outputs:
  DispatchProject: { Value: !Ref CiDispatchProject }
  WorkerDdb: { Value: !Ref CiDdbLayerProject }
  WorkerFunction: { Value: !Ref CiFunctionWorkerProject }
