version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - python3 -m pip install --upgrade pip
      - python3 -m pip install --user aws-sam-cli
      - export PATH="$PATH:/root/.local/bin"
      - command -v jq >/dev/null 2>&1 || (echo "jq not found in image" && exit 1)
  build:
    commands:
      - set -eu
      - |
        COMMIT_ID="${COMMIT_ID:-${CODEBUILD_RESOLVED_SOURCE_VERSION:-${CODEBUILD_SOURCE_VERSION:-}}}"
        REF="${REF:-refs/heads/${BRANCH:-manual}}"
        if [ -z "${COMMIT_ID}" ]; then
          echo "ERROR: COMMIT_ID not set and source version is unknown. Set Source version (commit SHA) when starting the build." >&2
          exit 1
        fi
        if [ -z "${OLD_COMMIT:-}" ]; then
          OLD_COMMIT="$(aws codecommit get-commit \
            --repository-name "${REPO_NAME}" \
            --commit-id "${COMMIT_ID}" \
            --output json | jq -r '.commit.parents[0] // empty')"
        fi
        echo "Deploying changes on ${REF} (OLD_COMMIT=${OLD_COMMIT:-none} â†’ COMMIT_ID=${COMMIT_ID}) ENV=${ENV}"
        if [ -n "${OLD_COMMIT:-}" ]; then
          CHANGED="$(aws codecommit get-differences \
            --repository-name "${REPO_NAME}" \
            --before-commit-specifier "${OLD_COMMIT}" \
            --after-commit-specifier  "${COMMIT_ID}" \
            --output json | jq -r '.differences[]? | (.afterBlob.path // .beforeBlob.path)')"
          printf "%s\n" "${CHANGED}" | sort -u > /tmp/changed.txt || true
        else
          echo "No OLD_COMMIT derived (root commit or manual run without parent). Deploying based on repo content."
          : > /tmp/changed.txt
          if [ -d layers/ddb ]; then echo 'layers/ddb/detect' >> /tmp/changed.txt; fi
          if [ -d functions ]; then
            for d in functions/*; do
              [ -d "$d" ] && echo "$d/detect" >> /tmp/changed.txt || true
            done
          fi
        fi
        echo "Changed paths:"; cat /tmp/changed.txt || true

      # Deploy shared DDB layer if touched
      - |
        if grep -qE '^layers/ddb/' /tmp/changed.txt; then
          make -e cd-ddb-layer
        fi

      # Deploy each changed function
      - |
        FUNCS=$(awk -F/ '/^functions\/[^/]+\// {print $2}' /tmp/changed.txt | sort -u)
        for f in $FUNCS; do
          echo "Deploying function: $f"
          make -e cd-function FUNCTION_NAME="$f"
        done
