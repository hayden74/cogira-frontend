name: ci-cd

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_targets:
        description: 'Optional: space-separated make targets (e.g. "ddb-layer hello-lambda")'
        required: false
        default: ""

permissions:
  id-token: write # OIDC
  contents: read

env:
  ENV: dev
  REGION: us-east-1
  ROLE_ARN: arn:aws:iam::198484116352:role/cogira-frontend-github-deploy-role

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install toolchain
        run: |
          python3 -V
          pip install --upgrade pip
          pip install aws-sam-cli
          npm i -g esbuild
          sam --version
          node -v
          npm -v
          esbuild --version
          git --version
          aws --version

      - name: Create AWS profile for Makefiles (ENV)
        run: |
          mkdir -p ~/.aws
          printf "[%s]\naws_access_key_id=%s\naws_secret_access_key=%s\naws_session_token=%s\n" \
            "${ENV}" "${AWS_ACCESS_KEY_ID}" "${AWS_SECRET_ACCESS_KEY}" "${AWS_SESSION_TOKEN}" > ~/.aws/credentials
          printf "[profile %s]\nregion=%s\n" "${ENV}" "${REGION}" > ~/.aws/config

      - name: Decide targets
        id: plan
        env:
          FORCE_TARGETS: ${{ github.event.inputs.force_targets }}
        run: |
          set -euo pipefail
          echo "ENV=$ENV REGION=$REGION"
          if [ -n "${FORCE_TARGETS}" ]; then
            TARGETS="${FORCE_TARGETS}"
          else
            BEFORE="${{ github.event.before }}"
            AFTER="${{ github.sha }}"
            if [ -z "$BEFORE" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
              CHANGED="$(git ls-files)"
            else
              CHANGED="$(git diff --name-only "$BEFORE" "$AFTER" || true)"
            fi
            echo "Changed files:"
            echo "$CHANGED"

            TARGETS=""
            # Trigger on DDB layer only (GH path remains single-layer)
            echo "$CHANGED" | grep -qE '^layers/ddb/' && TARGETS="$TARGETS ddb-layer" || true
            echo "$CHANGED" | grep -qE '^functions/hello-lambda/' && TARGETS="$TARGETS hello-lambda" || true

            # order: layer -> function
            TARGETS="$(echo "$TARGETS" | xargs -n1 | awk '!seen[$0]++' | grep -E '^(ddb-layer|hello-lambda)$' || true)"
          fi
          echo "Targets: ${TARGETS:-<none>}"
          echo "targets=${TARGETS}" >> $GITHUB_OUTPUT

      - name: Install root deps (optional)
        if: steps.plan.outputs.targets != ''
        run: |
          [ -f package.json ] && npm ci || true

      - name: Run Make targets
        if: steps.plan.outputs.targets != ''
        run: |
          set -euo pipefail
          for t in ${{ steps.plan.outputs.targets }}; do
            echo "=== make $t ==="
            make "$t" ENV="${ENV}" REGION="${REGION}"
          done

      - name: No-op
        if: steps.plan.outputs.targets == ''
        run: echo "No matching changes; nothing to deploy."
